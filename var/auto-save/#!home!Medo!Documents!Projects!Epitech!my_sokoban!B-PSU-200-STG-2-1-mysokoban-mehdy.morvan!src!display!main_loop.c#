/*
** EPITECH PROJECT, 2021
** my_sokoban
** File description:
** main_loop.c
*/

#include <ncurses.h>
#include "my.h"
#include "map.h"
#include "box.h"
#include <stdlib.h>
#include "storages.h"

void display_storage(map_t map, storage_t *storages);
void display_boxes(map_t map, boxes_t boxes);
void move_player_up(map_t *map, boxes_t *boxes);
void move_player_right(map_t *map, boxes_t *boxes);
void move_player_left(map_t *map, boxes_t *boxes);
void move_player_down(map_t *map, boxes_t *boxes);
void update_boxes(boxes_t *boxes, storage_t *storages, map_t map);
int win_or_lose(boxes_t boxes);
void reset_maps(map_t *map, map_t init_map, boxes_t *boxes,
                storage_t *storages);

void print_map_on_screen(map_t map, boxes_t boxes, storage_t *storages)
{
    int len = 0;
    int center_line = LINES / 2 - map.nb_lines / 2;

    for (int i = 0; map.map[i] != 0; ++i) {
        len = my_strlen(map.map[i]);
        mvprintw(center_line + i, COLS / 2 - len, "%s\n", map.map[i]);
    }
    int player_len = COLS / 2 - my_strlen(map.map[map.playerx]);
    display_storage(map, storages);
    display_boxes(map, boxes);
    mvprintw(map.playerx + center_line, map.playery + player_len, "P");
}

void handle_user_input(map_t *map, boxes_t *boxes,
                        map_t init_map, storage_t *storages)
{
    int user_input = getch();
    if (user_input == ' ')
        reset_maps(map, init_map, boxes, storages);
    if (user_input == 259)
        move_player_up(map, boxes);
    if (user_input == 258)
        move_player_down(map, boxes);
    if (user_input == 260)
        move_player_left(map, boxes);
    if (user_input == 261)
        move_player_right(map, boxes);
}

void basic_handling(map_t map, boxes_t boxes, storage_t *storages)
{
    print_map_on_screen(map, boxes, storages);
    update_boxes(&boxes, storages, map);
}

void update_ending(boxes_t boxes, int *ending)
{
    if (win_or_lose(boxes) == 1)
        *ending = 1;
    else if (win_or_lose(boxes) == -1)
        *ending = 0;
}

int main_loop(map_t map, map_t init_map, boxes_t boxes, storage_t *storages)
{
    int ending = -1;
    initscr();
    curs_set(0);
    keypad(stdscr, TRUE);
    while (1) {
        if (ending == -1)
            basic_handling(map, boxes, storages);
        else {
            endwin();
            return ending;
        }
        handle_user_input(&map, &boxes, init_map, storages);
        update_ending(boxes, &ending);
        clear();
    }
}
